# -*- coding: utf-8 -*-
"""Bourse meilleure version.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1de6acqq8SG4mM-EQARI2J6WcDAO1LzEp
"""


import yfinance as yf

# 0) mapping yfinance → StockAnalysis pour les cas particuliers
#     clé   = ticker yfinance
#     valeur = segment de l’URL StockAnalysis
sa_mapping = {
    "NEM.DE": "quote/etr/NEM",   # Nemetschek SE
    # tu peux ajouter d'autres mappings si nécessaire
}

tickers = [
    "AMZN", "ASML", "NVDA", "GOOG",
    "BKNG", "NEM.DE",  "CRM",  "INTU",
    "MA",   "MSFT", "SPGI", "V"
]

# 1. Dictionnaire vide
pe_dictionnaire = {}

# 2. Boucle sur chaque ticker
for symbole_boursier in tickers:
    t = yf.Ticker(symbole_boursier)
    pe = t.info["trailingPE"]
    pe_dictionnaire[symbole_boursier] = pe   # bien écrire pe_dict, pas pe_dictionnaire

# 3. Affiche le résultat
print(pe_dictionnaire)



import pandas as pd

KPI = pd.DataFrame.from_dict(
    pe_dictionnaire,     # ton dict renommé
    orient='index',      # les clés (tickers) deviendront l’index
    columns=['PE_trailing']  # nom de la colonne pour les valeurs
)
print(KPI)

# Mettre l’index (tickers) dans une colonne nommée 'Ticker'
KPI = KPI.reset_index().rename(columns={'index': 'Ticker'})
print(KPI)

from datetime import datetime
date_requete = datetime.now().strftime("%d/%m/%Y")
KPI['Date_Requete'] = date_requete
print(KPI)

KPI = KPI[['Date_Requete', 'Ticker', 'PE_trailing']]
print(KPI)

forwardpedictionnaire = {}

for symbole_boursier in tickers:
  t =yf.Ticker(symbole_boursier)
  forwardpe = t.info["forwardPE"]
  forwardpedictionnaire[symbole_boursier] = forwardpe
print(forwardpedictionnaire)

df_forward = pd.DataFrame.from_dict(
    forwardpedictionnaire,
    orient='index',
    columns=['ForwardPE']
).reset_index().rename(columns={'index':'Ticker'})
print (df_forward)

# 1) Afficher toutes les colonnes sans coupure
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)

# 2) Affichage natif de Jupyter
KPI

KPI = KPI.merge(df_forward, on='Ticker', how='left')
print(KPI)

KPI['PE_Ratio'] = KPI['ForwardPE'] / KPI['PE_trailing']
print(KPI)

growth_dictionnaire = {}
t = yf.Ticker(symbole_boursier)
growth = t.growth_estimates
growth_dictionnaire = growth
growth_dictionnaire = growth.to_dict(orient="index") if growth is not None else {}
print(growth_dictionnaire)

import requests
import pandas as pd
from io import StringIO


def fetch_growth5(symbole_boursier):
    # 1) Choix du chemin sur StockAnalysis
    #    si dans sa_mapping, on prend ce chemin, sinon on reste sur 'stocks/<ticker>'
    if symbole_boursier in sa_mapping:
        path = sa_mapping[symbole_boursier]
    else:
        path = f"stocks/{symbole_boursier.lower()}"
    url = f"https://stockanalysis.com/{path}/statistics/"

    # 2) Requête HTTP avec User‑Agent
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/115.0.0.0 Safari/537.36"
        ),
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
    }
    resp = requests.get(url, headers=headers, timeout=10)
    resp.raise_for_status()

    # 3) Parser les tableaux HTML
    html_io = StringIO(resp.text)
    tables  = pd.read_html(html_io)

    # 4) Chercher la ligne "Beta (5Y)"
    for df in tables:
        if df.shape[1] == 2:
            df = df.rename(columns={df.columns[0]: "Metric", df.columns[1]: "Value"})
            row = df[df["Metric"].str.strip() == "Revenue Growth Forecast (5Y)"]
            if not row.empty:
                val = row["Value"].iloc[0]
                try:
                    return float(val)
                except ValueError:
                    return val
    return None

# --- Point d’entrée dans ton notebook ---

# Supposons que KPI est déjà construit avec ta colonne 'Ticker'
# et que tu as défini tickers = KPI["Ticker"].tolist()

growth5_dict = {}
for sym in tickers:
    try:
        growth5_dict[sym] = fetch_growth5(sym)
    except requests.HTTPError as e:
        print(f"⚠️ Pas de page Statistics pour {sym}: {e}")
        growth5_dict[sym] = None

df_growth5 = (
    pd.DataFrame.from_dict(growth5_dict, orient="index", columns=["Prevision croissance 5 ans"])
      .reset_index()
      .rename(columns={"index":"Ticker"})
)

KPI = KPI.merge(df_growth5, on="Ticker", how="left")
print(KPI)



df = yf.download(tickers, period="10y")
performance_dict = {}
for ticker in tickers:
    prix_debut = df['Close'][ticker].iloc[0]
    prix_fin = df['Close'][ticker].iloc[-1]
    performance_dict[ticker] = ((prix_fin - prix_debut) / prix_debut * 100) / 10

Performancemoyenne10ans = pd.Series(performance_dict)

Performancemoyenne10ans_df = Performancemoyenne10ans.reset_index().rename(columns={'index': 'Ticker', 0: 'Performance_Moyenne_10ans'})
KPI = KPI.merge(Performancemoyenne10ans_df, on='Ticker', how='left')
print(KPI)

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

# Mapping GuruFocus dans gurufocus le ticker n'est pas le même
gf_mapping = {
    "NEM.DE": "NEMTF",
}

def scraper_metrics(ticker):
    gf_ticker = gf_mapping.get(ticker, ticker) # Modified to use gf_mapping
    url = f"https://www.gurufocus.com/stock/{gf_ticker}/summary"
    headers = {"User-Agent": "Mozilla/5.0"}

    response = requests.get(url, headers=headers)
    results = {
        "Ticker": ticker,
        "ROIC %": None,
        "FCF Margin %": None,
        "Gross Margin %": None
    }

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        for tag in soup.find_all(['div', 'span']):
            text = tag.get_text(strip=True)

            for kpi in ["ROIC %", "FCF Margin %", "Gross Margin %"]:
                if kpi in text and results[kpi] is None:
                    pattern = re.escape(kpi) + r'\s*([0-9]+(?:\.[0-9]+)?)'
                    match = re.search(pattern, text)
                    if match:
                        results[kpi] = match.group(1)  # Sans le '%'

            if all(results.values()):
                break

    return results


# Exemple : appliquer sur ta liste de tickers déjà dans KPI
tickers = KPI["Ticker"].tolist()  # Ta liste réelle de tickers

# Scraper et créer le DataFrame
data_scraped = []
for ticker in tickers:
    data_scraped.append(scraper_metrics(ticker))

df_metrics = pd.DataFrame(data_scraped)

# Fusion avec ton DataFrame KPI existant
KPI = KPI.merge(df_metrics, on="Ticker", how='left')

# Affichage
print(KPI)

from datetime import datetime
date_str = datetime.now().strftime("%Y-%m-%d")
KPI.to_csv(f"resultats_bourse_{date_str}.csv", index=False, encoding="utf-8")
